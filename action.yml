name: "Terraform Apply"
description: "Runs a Terraform Apply"
inputs:
  terraform_version:
    required: true
    description: "The version of Terraform to use"
  terraform_api:
    required: false
    description: "The Terraform API hostname"
  terraform_wrapper:
    required: false
    description: "setup-terraform actions by defaults uses a wrapper script. Sometime this gets in the way of certain operations"
    default: 'false'
  setup_terraform:
    default: "true"
    description: "Whether to setup Terraform"
  workspace:
    required: false
    description: "The Terraform workspace to use"
  varfile:
    required: false
    description: "The variable file to use with Terraform"
  apply_args:
    required: false
    description: "Additional arguments for 'terraform init'"
  download_cache:
    default: "false"
    description: "Whether to download the Terraform cache"
  commit_sha:
    required: false
    description: "The commit SHA to checkout"
  cache_key:
    required: false
    description: "The cache key"
  cache_bucket:
    required: false
    description: "The cache bucket"
    default: image-pipeline-assets
  

runs:
  using: "composite"
  steps:
    - uses: CSVD/gh-actions-checkout@v4
      id: checkout
      with:
        ref: ${{ inputs.commit_sha == '' && github.head_ref || inputs.commit_sha }}
        persist-credentials: false

    - name: Download Terraform Directory
      uses: CSVD/s3-download@main
      if: ${{ inputs.download_cache == 'true' }}
      with:
        bucket: ${{ inputs.cache_bucket }}
        cache_key: ${{ inputs.cache_key }}/terraform-dir
        dest: .
        unarchive: true

    - name: Download Terraform Lockfile
      uses: CSVD/s3-download@main
      if: ${{ inputs.download_cache == 'true' }}
      with:
        bucket: ${{ inputs.cache_bucket }}
        cache_key: ${{ inputs.cache_key }}/terraform.lock.hcl
        dest: .terraform.lock.hcl
        unarchive: false

    - name: Download Terraform Planfile
      uses: CSVD/s3-download@main
      if: ${{ inputs.download_cache == 'true' }}
      with:
        bucket: ${{ inputs.cache_bucket }}
        cache_key: ${{ inputs.cache_key }}/terraform.plan
        dest: terraform.plan
        unarchive: false

    - name: Setup Terraform
      uses: CSVD/gh-actions-setup-terraform@v2
      if: ${{ inputs.setup_terraform == 'true' && env.TFE_TOKEN != '' }}
      with:
        terraform_version: ${{ inputs.terraform_version }}
        cli_config_credentials_token: ${{ env.TFE_TOKEN }}
        cli_config_credentials_hostname: ${{ inputs.terraform_api }}
        terraform_wrapper: ${{ inputs.terraform_wrapper }}

    - name: Setup Terraform
      uses: CSVD/gh-actions-setup-terraform@v2
      if: ${{ inputs.setup_terraform == 'true' && env.TFE_TOKEN == '' }}
      with:
        terraform_version: ${{ inputs.terraform_version }}
        terraform_wrapper: ${{ inputs.terraform_wrapper }}

    - name: Set Workspace
      shell: bash
      if: ${{ inputs.workspace != '' }}
      run: |
        echo "TF_WORKSPACE=${{ inputs.workspace }}" >> $GITHUB_ENV

    - name: Set TF_CLI_ARGS (Varfile)
      shell: bash
      if: ${{ inputs.varfile != '' }}
      run: |
        echo "TF_CLI_ARGS=-var-file=${{ inputs.varfile }} ${{ inputs.apply_args }}" >> $GITHUB_ENV

    - name: Set TF_CLI_ARGS (NonVarfile)
      shell: bash
      if: ${{ inputs.varfile == '' }}
      run: |
        echo "TF_CLI_ARGS='${{ inputs.apply_args }}'" >> $GITHUB_ENV

    - name: Terraform Apply
      shell: bash
      run: terraform apply terraform.plan
