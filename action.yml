name: "Terraform Apply"
description: "Runs a Terraform Apply"
inputs:
  terraform_version:
    required: true
    type: string
  terraform_api:
    required: false
    type: string
  workspace:
    required: false
    type: string
  varfile:
    required: false
    type: string
  setup_terraform:
    type: boolean
    default: false
  terraform_init:
    type: boolean
    default: false
  state_bucket:
    type: string
    required: false
  state_region:
    type: string
    required: false
  state_prefix:
    type: string
    required: false
  state_dynamodb_table:
    type: string
    required: false
  init_args:
    type: string
    required: false
  download_cache:
    type: boolean
    default: false
  cache:
    required: false
    type: string
  commit_sha:
    required: false
    type: string

secrets:
  TFE_TOKEN:
    required: false
    type: string

outputs:
  commit_sha:
    description: "Commit SHA"
    value: ${{ steps.checkout.outputs.commit }}

runs:
  using: "composite"
  steps:
    - uses: CSVD/gh-actions-checkout@v4
      id: checkout
      with:
        ref: ${{ inputs.commit_sha == '' && github.head_ref || inputs.commit_sha }}
        persist-credentials: false

    - name: Download Terraform Directory
      uses: CSVD/s3-download@main
      if: ${{ inputs.download_cache == 'true' }}
      with:
        bucket: ${{ inputs.cache_bucket }}
        cache_key: ${{ inputs.cache_key }}/terraform-dir
        dest: .
        unarchive: true

    - name: Download Terraform Lockfile
      uses: CSVD/s3-download@main
      if: ${{ inputs.download_cache == 'true' }}
      with:
        bucket: ${{ inputs.cache_bucket }}
        cache_key: ${{ inputs.cache_key }}/terraform.lock.hcl
        dest: .terraform.lock.hcl
        unarchive: false
        
    - name: Download Terraform Planfile
      uses: CSVD/s3-download@main
      if: ${{ inputs.download_cache == 'true' }}
      with:
        bucket: ${{ inputs.cache_bucket }}
        cache_key: ${{ inputs.cache_key }}/terraform.plan
        dest: terraform.plan
        unarchive: false
        
    - name: Setup Terraform
      uses: CSVD/gh-actions-setup-terraform@v2
      if: ${{ inputs.setup_terraform && env.TFE_TOKEN != '' }}
      with:
        terraform_version: ${{ inputs.terraform_version }}
        cli_config_credentials_token: ${{ env.TFE_TOKEN }}
        cli_config_credentials_hostname: ${{ inputs.terraform_api }}

    - name: Setup Terraform
      uses: CSVD/gh-actions-setup-terraform@v2
      if: ${{ inputs.setup_terraform && env.TFE_TOKEN == '' }}
      with:
        terraform_version: ${{ inputs.terraform_version }}

   - name: Set Workspace
      shell: bash
      if: ${{ inputs.workspace != '' }}
      run: |
        echo "TF_WORKSPACE=${{ inputs.workspace }}" >> $GITHUB_ENV
        
    - name: Set TF_CLI_ARGS (Varfile)
      shell: bash
      if: ${{ inputs.varfile != '' }}
      run: |
        echo "TF_CLI_ARGS=-var-file=${{ inputs.varfile }} ${{ inputs.apply_args }}" >> $GITHUB_ENV
        
    - name: Set TF_CLI_ARGS (NonVarfile)
      shell: bash
      if: ${{ inputs.varfile == '' }}
      run: |
        echo "TF_CLI_ARGS='${{ inputs.apply_args }}" >> $GITHUB_ENV
    
    - name: Terraform Init
      id: init
      shell: bash
      if: ${{ inputs.terraform_init == 'true' }}
      run: terraform init -upgrade
     
    - name: Terraform Plan
      id: plan
      continue-on-error: true
      if: ${{ inputs.terraform_plan == 'true' }}
      shell: bash
      run: |
        terraform plan -detailed-exitcode -out=terraform_plan
        exit_code=$?
        if [ $exit_code -eq 2 ]; then
          echo plan_succeeded=true >> $GITHUB_OUTPUT
          echo pending_changes=true >> $GITHUB_OUTPUT
        elif [ $exit_code -eq 0 ]; then
          echo plan_succeeded=true >> $GITHUB_OUTPUT
          echo pending_changes=false >> $GITHUB_OUTPUT
        else
          echo plan_succeeded=false >> $GITHUB_OUTPUT
          echo pending_changes=false >> $GITHUB_OUTPUT
        fi
        
    - name: Terraform Apply
      run: terraform apply -auto-approve terraform.plan
